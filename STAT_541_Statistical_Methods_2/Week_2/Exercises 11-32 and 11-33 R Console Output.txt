> library(readxl)
> ex11_32 <- read_excel("C:/Lexar 8 & 32 GB Switch/Lexar 8GB/STAT 541 Summer 2020 Online (Current)/Homework/HW2 Simple Linear Regression/ex11-32.xlsx")
> View(ex11_32)
> # Note the name for the imported Excel file
> str(ex11_32)
Classes ‘tbl_df’, ‘tbl’ and 'data.frame':	12 obs. of  2 variables:
 $ WeightLoss  : num  4.3 5.5 6.8 8 4 5.2 6.6 7.5 2 4 ...
 $ ExposureTime: num  4 5 6 7 4 5 6 7 4 5 ...
> # To have most of our R code reuseable for future 
> #  analyses, we will use a data object called dataobj
> dataobj <- as.data.frame(ex11_32)
> str(dataobj)
'data.frame':	12 obs. of  2 variables:
 $ WeightLoss  : num  4.3 5.5 6.8 8 4 5.2 6.6 7.5 2 4 ...
 $ ExposureTime: num  4 5 6 7 4 5 6 7 4 5 ...
> par(mfrow = c(1, 1))
> plot(dataobj$ExposureTime,dataobj$WeightLoss,xlab="Exposure Time",
+      ylab="Weight Loss",
+      main="Exercises 11.32 and 11.33", pch=19,cex=1.5)
> # Split the plotting panel into a 2 x 2 grid
> #  this puts four graphs in one window
> par(mfrow = c(2, 2))
> # model the dependent variable as a function of 
> #   the independent variable
> model <- lm(WeightLoss ~ ExposureTime , data=dataobj)
> summary(model)

Call:
lm(formula = WeightLoss ~ ExposureTime, data = dataobj)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.5333 -0.5625  0.3917  0.5458  0.7667 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept)   -1.7333     1.1652  -1.488    0.168    
ExposureTime   1.3167     0.2076   6.342 8.44e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.8041 on 10 degrees of freedom
Multiple R-squared:  0.8009,	Adjusted R-squared:  0.781 
F-statistic: 40.22 on 1 and 10 DF,  p-value: 8.437e-05

> plot(model)
> # Shapiro-Wilk test for normality of errors and use alpha=0.01
> shapiro.test(resid(model))

	Shapiro-Wilk normality test

data:  resid(model)
W = 0.85461, p-value = 0.04187

> par(mfrow=c(1,1))
> # Plot the regression line on the scatterplot
> plot(dataobj$ExposureTime,dataobj$WeightLoss,xlab="Exposure time",
+      ylab="Weight Loss",     main="Exercises 11.32 and 11.33",
+      pch=19,cex=1.5)
> abline(model$coefficients)
> # This exercise asks for a right-tailed test of the
> #   slope parameter
> # The following code will extract the test statistic and 
> #   determine the p-value for a right-tailed test
> result <- summary(model)
> T.S. <- result$coefficients[2,3]
> pvalrt <- pt(T.S.,df=df.residual(model),lower.tail=FALSE)
> print(pvalrt)
[1] 4.218266e-05
> # Compute confidence intervals at specified values of Exposure Time
> new.expotime <- data.frame(ExposureTime=c(4,5,6,7))
> predict(model,newdata=new.expotime,interval="confidence")
       fit      lwr      upr
1 3.533333 2.667937 4.398729
2 4.850000 4.283465 5.416535
3 6.166667 5.600132 6.733201
4 7.483333 6.617937 8.348729
> # Compute prediction intervals at specified values of Exposure Time
> predict(model,newdata=new.expotime,interval="prediction")
       fit      lwr      upr
1 3.533333 1.543729 5.522938
2 4.850000 2.971017 6.728983
3 6.166667 4.287684 8.045650
4 7.483333 5.493729 9.472938
> # use ggplot2 to get nice graphs
> # R package ggplot2 must be installed first
> library(ggplot2)
> # 1. Add predictions 
> pred.int <- predict(model, interval = "prediction")
Warning message:
In predict.lm(model, interval = "prediction") :
  predictions on current data refer to _future_ responses

> mydata <- cbind(dataobj, pred.int)
> # 2. Regression line + confidence bands
> p <- ggplot(mydata, aes(ExposureTime, WeightLoss)) +
+   geom_point() +
+   stat_smooth(method = lm)
> # 3. Add prediction bands
> p + geom_line(aes(y = lwr), color = "red", linetype = "dashed")+
+   geom_line(aes(y = upr), color = "red", linetype = "dashed")
>